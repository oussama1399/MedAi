# 03_Maladies_Potentielles.py - Page des maladies potentielles

import streamlit as st
import json
import os
from datetime import datetime
import logging
from fpdf import FPDF
import base64

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Titre et style de l'application
st.set_page_config(
    page_title="ü©∫ Maladies Potentielles - Assistant Sant√© IA",
    page_icon="ü©∫",
    layout="wide"
)

# Chemin de stockage local
USER_DATA_DIR = "user_data"
USERS_FILE = os.path.join(USER_DATA_DIR, "users.json")

# CSS personnalis√©
st.markdown("""
<style>
    .disease-item {
        background-color: #fff3cd;
        padding: 20px;
        border-left: 5px solid #ffc107;
        margin-bottom: 14px;
        border-radius: 10px;
        font-size: 1.08em;
        min-width: 260px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.07);
    }
    .disease-date {
        font-size: 0.95em;
        color: #6c757d;
        margin-bottom: 5px;
    }
    .warning-box {
        background-color: #f8d7da;
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid #dc3545;
        margin-bottom: 20px;
        font-size: 1em;
    }
    .download-button {
        background-color: #198754 !important;
        color: white !important;
        padding: 0.7rem 1.2rem;
        border-radius: 7px;
        font-size: 1.1em;
    }
</style>
""", unsafe_allow_html=True)

# Fonctions pour g√©rer les utilisateurs
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)

# Cr√©er un PDF des maladies potentielles
def create_diseases_pdf(diseases):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", 'B', size=16)
    
    pdf.cell(200, 10, txt="Rapport de Maladies Potentielles", ln=True, align='C')
    pdf.ln(10)
    
    pdf.set_font("Arial", 'B', size=12)
    pdf.cell(200, 10, txt="Avertissement M√©dical", ln=True)
    pdf.set_font("Arial", size=10)
    pdf.multi_cell(0, 7, "Ce document ne constitue pas un diagnostic m√©dical. Les informations pr√©sent√©es sont g√©n√©r√©es par un syst√®me d'intelligence artificielle et doivent √™tre valid√©es par un professionnel de sant√©.")
    pdf.ln(10)
    
    pdf.set_font("Arial", 'B', size=14)
    pdf.cell(200, 10, txt=f"Sympt√¥mes et Conditions Potentielles", ln=True)
    pdf.ln(5)
    
    for i, disease in enumerate(diseases):
        # Date
        pdf.set_font("Arial", 'I', size=10)
        date = disease.get("date", "Date inconnue")
        pdf.cell(200, 7, txt=f"Date: {date}", ln=True)
        
        # Question/sympt√¥me
        pdf.set_font("Arial", 'B', size=12)
        pdf.cell(200, 10, txt=f"Sympt√¥me rapport√©:", ln=True)
        pdf.set_font("Arial", size=11)
        pdf.multi_cell(0, 7, disease.get("symptom_question", ""))
        pdf.ln(5)
        
        # R√©ponse/analyse
        pdf.set_font("Arial", 'B', size=12)
        pdf.cell(200, 10, txt=f"Analyse:", ln=True)
        pdf.set_font("Arial", size=11)
        pdf.multi_cell(0, 7, disease.get("suggested_answer", ""))
        pdf.ln(10)
    
    filename = f"maladie_potentielle_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    pdf.output(filename)
    return filename

# Fonction d'export en PDF
def export_to_pdf(diseases):
    filename = create_diseases_pdf(diseases)
    with open(filename, "rb") as f:
        pdf_data = f.read()
    b64 = base64.b64encode(pdf_data).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}" class="download-button">üì• T√©l√©charger le rapport PDF</a>'
    return href

# V√©rification de la session
if "logged_in" not in st.session_state or not st.session_state.logged_in:
    st.warning("‚ö†Ô∏è Vous devez √™tre connect√© pour acc√©der √† cette page.")
    st.info("üëâ Retournez √† la page principale pour vous connecter.")
    st.stop()

# Obtenir les donn√©es utilisateur
username = st.session_state.current_user
users = load_users()
user_data = users.get(username, {})
diseases = user_data.get("potential_diseases", [])

# Interface principale
st.title("ü©∫ Maladies Potentielles")

# Avertissement m√©dical
st.markdown("""
<div class='warning-box'>
‚ö†Ô∏è <strong>Avertissement M√©dical Important:</strong><br>
Cette section pr√©sente des analyses automatis√©es bas√©es sur vos questions et sympt√¥mes rapport√©s. 
Ces informations ne constituent en aucun cas un diagnostic m√©dical et ne remplacent pas une 
consultation avec un professionnel de sant√© qualifi√©. Veuillez consulter un m√©decin pour toute 
pr√©occupation de sant√©.
</div>
""", unsafe_allow_html=True)

# Affichage des statistiques
total_diseases = len(diseases)
st.subheader(f"üìä {total_diseases} sympt√¥me{'s' if total_diseases > 1 else ''} analys√©{'s' if total_diseases > 1 else ''}")

# Tri des maladies
sort_options = ["Plus r√©centes d'abord", "Plus anciennes d'abord"]
sort_choice = st.radio("Tri des sympt√¥mes:", sort_options, horizontal=True)

# Trier les maladies
if sort_choice == "Plus anciennes d'abord":
    diseases = sorted(diseases, key=lambda x: x.get("date", ""))
else:
    diseases = sorted(diseases, key=lambda x: x.get("date", ""), reverse=True)

# Affichage des maladies potentielles
if not diseases:
    st.info("üëç Aucun sympt√¥me ou maladie potentielle n'a √©t√© d√©tect√© dans vos questions.")
else:
    # Bouton pour exporter toutes les maladies en PDF
    st.markdown(export_to_pdf(diseases), unsafe_allow_html=True)
    
    # Affichage de chaque maladie
    for i, disease in enumerate(diseases):
        with st.container():
            # Formatage des dates
            try:
                date = datetime.fromisoformat(disease.get("date", "")).strftime("%d/%m/%Y √† %H:%M")
            except:
                date = disease.get("date", "Date inconnue")
            
            st.markdown(f"<div class='disease-date'>üìÖ {date}</div>", unsafe_allow_html=True)
            st.markdown(f"""
            <div class='disease-item'>
                <strong>‚ùì Sympt√¥me rapport√©:</strong> {disease['symptom_question']}<br><br>
                <strong>üî¨ Analyse:</strong> {disease['suggested_answer']}
            </div>
            """, unsafe_allow_html=True)
            
            # Option pour supprimer une entr√©e individuelle
            if st.button(f"üóëÔ∏è Supprimer cette entr√©e", key=f"delete_{i}"):
                diseases.pop(i)
                user_data["potential_diseases"] = diseases
                users[username] = user_data
                save_users(users)
                st.success("‚úÖ Entr√©e supprim√©e avec succ√®s!")
                st.rerun()
    
    # Option pour effacer toutes les maladies
    if st.button("üóëÔ∏è Effacer toutes les maladies potentielles", type="primary", use_container_width=True):
        user_data["potential_diseases"] = []
        users[username] = user_data
        save_users(users)
        st.success("‚úÖ Liste des maladies potentielles effac√©e avec succ√®s!")
        st.rerun()

# Section √Ä propos en bas de page
st.markdown("---")
st.markdown("""
<div style='font-size:0.95em;color:#888;text-align:center;margin-top:30px;'>
    <b>√Ä propos :</b> Assistant IA m√©dical d√©velopp√© pour l'aide √† l'information sant√©, ne remplace pas un avis m√©dical professionnel.<br>
    Donn√©es issues de NHS, PubMed, OMS.| D√©velopp√© par Ahmed QAIS et Oussama KADDOURI
</div>
""", unsafe_allow_html=True)
